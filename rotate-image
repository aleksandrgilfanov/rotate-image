#!/usr/bin/python

import argparse
import errno
import glob
import os
import sys
from Queue import Queue
from threading import Thread

# pip install --user pillow
from PIL import Image

def save_rotated_image(degree, bgimg, opacity):
	src = Image.open(args.srcimg)
	size = src.size
	rotated = src.rotate(-degree)

	name = "{:03d}".format(degree)
	fullpath = out + "/" + name + ".png"

	if bgimg:
		bg_pre = Image.open(bgimg)
		bg = bg_pre.resize(size)

		# get alpha mask from rotated image
		# pillow < 4.3.0 does not have getchannel('A'), so
		alpha = rotated.split()[-1]

		if opacity:
			bg_alpha = bg.convert("RGBA")
			rotated_blend = Image.blend(rotated, bg_alpha, opacity)
			composite = Image.composite(rotated_blend, bg, alpha)
		else:
			composite = Image.composite(rotated, bg, alpha)

		composite.save(fullpath)
	else:
		rotated.save(fullpath)

	print(fullpath + " created")

class Worker(Thread):
	def __init__(self, queue):
		Thread.__init__(self)
		self.queue = queue

	def run(self):
		while True:
			(degree, bgimg, opacity) = self.queue.get()
			try:
				save_rotated_image(degree, bgimg, opacity)
			finally:
				self.queue.task_done()

parser = argparse.ArgumentParser()

parser.add_argument("--opacity", help="opacity of source image (by default is 0.0 = not transparent)")
parser.add_argument("--bgdir", help="directory that contains background images")
parser.add_argument("--bgimg", help="background image")
parser.add_argument("--frames", help="frames count, default 360")
parser.add_argument("srcimg", help="source image to rotate")
parser.add_argument("outdir", help="output directory to save rotated images")
args = parser.parse_args()

out = args.outdir

if args.frames:
	frames = int(args.frames)
else:
	frames = 360

if args.opacity:
	opacity = float(args.opacity)
else:
	opacity = 0.0

if args.bgimg:
	bgimg = args.bgimg

if args.bgdir:
	bgimages = sorted(glob.glob(args.bgdir + "/*.png"))
	# add reversed list of bgimages for ping-pong effect
	revlist = reversed(bgimages)
	bgimages.extend(revlist)
	# store bgframes to loop this list later
	bgframes = len(bgimages)
	# for 30 fps 360 frames is 12 sec, so
	# use 5 repeats = 60 sec video
	frames = frames * 5

if not os.path.exists(out):
	os.mkdir(out)
elif not os.path.isdir(out):
	raise Exception(out + " is exist, but it is not a directory")

queue = Queue()
for x in range(8):
	worker = Worker(queue)
	worker.daemon = True
	worker.start()

for i in range(frames):
	if args.bgdir:
		bgimg = bgimages[i % (bgframes)]
	queue.put((i, bgimg, opacity))

queue.join()
